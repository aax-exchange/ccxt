<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ArgumentsRequired;
use \ccxt\BadRequest;
use \ccxt\BadResponse;
use \ccxt\OrderNotFound;

class aax extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'aax',
            'name' => 'AAX',
            'countries' => ['MT'],
            'enableRateLimit' => true,
            'rateLimit' => 1000,
            'version' => 'v2',
            'v1' => 'marketdata/v1',
            'has' => array(
                'cancelAllOrders' => true,
                'createLimitOrder' => false,
                'createMarketOrder' => false,
                'cancelOrder' => true,
                'createOrder' => true,
                'editOrder' => true,
                'fetchBalance' => true,
                'fetchClosedOrders' => true,
                'fetchDepositAddress' => false,
                'fetchMarkets' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrders' => true,
                'fetchOrderBook' => true,
                'fetchOrderTrades' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTrades' => true,
            ),
            'timeframes' => array(
                '1m' => '1',
                '5m' => '5',
                '15m' => '15',
                '30m' => '30',
                '1h' => '60',
                '2h' => '120',
                '4h' => '240',
                '12h' => '720',
                '1d' => '1440',
                '3d' => '4320',
                '1w' => '10080',
            ),
            'urls' => array(
                'logo' => 'http://cdn.aaxvip.com/res/images/logo/AAX-25B.jpg',
                'api' => 'https://api.aaxpro.com',
                'www' => 'https://www.aaxpro.com', // string website URL
                'doc' => 'https://www.aaxpro.com/apidoc/index.html',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'instruments', // This endpoint is used to retrieve all instruments information.
                        'market/candles', // Get OHLC(k line) of specific market
                        'getHistMarketData', // Get OHLC(k line) of specific market v1
                        'market/orderbook', // This endpoint allows you to retrieve the current order book for a specific symbol.
                        'market/tickers', // This endpoint allows you to retrieve the trading summary for all symbol in the last 24 hours
                        'market/trades', // Get the Most Recent Trades
                        'order_book', // Get the order book of specified market
                        'order_book/{market}',
                        'trades', // Get recent trades on market, each trade is included only once Trades are sorted in reverse creation order.
                        'trades/{market}',
                        'tickers', // Get ticker of all markets
                        'tickers/{market}', // Get ticker of specific market
                        'timestamp', // Get server current time, in seconds since Unix epoch
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'account/balances', // Retrieve user wallet balances.
                        'account/deposit/address',
                        'futures/openOrders', // Retrieve future open orders
                        'futures/trades', // This endpoint is used to retrieve your orders execution details
                        'futures/orders', // Retrieve historical futures orders
                        'spot/openOrders', // Retrieve spot open orders
                        'spot/orders', // Retrieve historical spot orders
                        'spot/trades', // This endpoint is used to retrieve your orders execution details
                    ),
                    'post' => array(
                        'futures/openOrders', // This endpoint is used to retrieve future open orders
                        'futures/orders', // This endpoint is used for placing future orders
                        'spot/openOrders', // This endpoint is used to retrieve spot open orders
                        'spot/orders', // This endpoint is used for placing spot orders
                    ),
                    'delete' => array(
                        'futures/orders/cancel/all', // Cancle all future Order
                        'futures/orders/cancel/{orderID}', // Cancel future Order
                        'spot/orders/cancel/all', // Cancle all spot Orders
                        'spot/orders/cancel/{orderID}', // Cancel Spot Order
                    ),
                    'put' => array(
                        'futures/orders', // This endpoint is used to amend the quantity or price of an open order.
                        'spot/orders', // This endpoint is used to amend the quantity or price of an open order.
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => 0.2 / 100,
                    'taker' => 0.2 / 100,
                ),
                'funding' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'withdraw' => array(), // There is only 1% fee on withdrawals to your bank account.
                ),
            ),
            'commonCurrencies' => array(
                'PLA' => 'Plair',
            ),
            'exceptions' => array(
                '2002' => '\\ccxt\\InsufficientFunds',
                '2003' => '\\ccxt\\OrderNotFound',
            ),
            'options' => array(
                'defaultType' => 'spot', // 'spot', 'future'
            ),
        ));
    }

    public function cancel_all_orders($symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelAllOrders() requires a $symbol argument');
        }
        $symbol = $this->deal_symbol($symbol, $params);
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $this->check_params($params);
        $isSpot = $this->is_spot($symbol, $params);
        $response = null;
        if ($isSpot) {
            $response = $this->privateDeleteSpotOrdersCancelAll (array_merge($request, $params));
        } else {
            $response = $this->privateDeleteFuturesOrdersCancelAll (array_merge($request, $params));
        }
        return array( 'info' => $response );
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $symbol = $this->deal_symbol($symbol, $params);
        return $this->fetch_orders($symbol, $since, $limit, array_merge(array( 'orderStatus' => 2 ), $params));
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        if (!$id) {
            throw new ArgumentsRequired($this->id . ' cancelAllOrders() requires a $symbol argument');
        }
        $this->load_markets();
        $request = array(
            'orderID' => $id,
        );
        $symbol = $this->deal_symbol($symbol, $params);
        $this->market($symbol);
        $this->check_params($params);
        $response = null;
        // spot or future
        try {
            $response = $this->privateDeleteSpotOrdersCancelOrderID ($request);
        } catch (Exception $error) {
            $response = $this->privateDeleteFuturesOrdersCancelOrderID ($request);
        }
        if ($response && $response['code'] !== 1) {
            throw new BadResponse($response['message']);
        }
        // $response={
        //     "code":1,
        //     "data":array(
        //        "avgPrice":"0",
        //        "base":"BTC",
        //        "clOrdID":"aax",
        //        "commission":"0",
        //        "createTime":"2019-11-12T03:46:41Z",
        //        "cumQty":"0",
        //        "$id":"114330021504606208",
        //        "isTriggered":false,
        //        "lastPrice":"0",
        //        "lastQty":"0",
        //        "leavesQty":"0",
        //        "orderID":"wJ4L366KB",
        //        "orderQty":"0.05",
        //        "orderStatus":1,
        //        "orderType":2,
        //        "price":"8000",
        //        "quote":"USDT",
        //        "rejectCode":0,
        //        "rejectReason":null,
        //        "side":1,
        //        "stopPrice":"0",
        //        "$symbol":"BTCUSDT",
        //        "transactTime":null,
        //        "updateTime":"2019-11-12T03:46:41Z",
        //        "timeInForce":1,
        //        "userID":"216214"
        //     ),
        //     "message":"success",
        //     "ts":1573530402029
        //  }
        $order = array_merge($response['data'], array( 'ts' => $response['ts'] ));
        $order = $this->parse_order($order);
        $status = $this->safe_string($order, 'status');
        if ($status === 'closed' || $status === 'canceled') {
            throw new OrderNotFound($this->id . ' ' . $this->json($order));
        }
        return $order;
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $symbol = $this->deal_symbol($symbol, $params);
        if (!($symbol && $type && $side && $amount)) {
            throw new ArgumentsRequired($this->id . ' createOrder  lack of arguments');
        }
        $type = strtoupper($type);
        $side = strtoupper($side);
        if (!$this->in_array($type, ['MARKET', 'LIMIT', 'SPOT', 'STOP-LIMIT'])) {
            throw new BadRequest('type must be MARKET, LIMIT, SPOT or STOP-LIMIT');
        }
        $this->load_markets();
        $request = array(
            'orderType' => $type,
            'symbol' => $this->market_id($symbol),
            'orderQty' => $amount,
            'stopPrice' => $this->safe_string($params, 'stopPrice'),
            'timeInForce' => $this->safe_string($params, 'timeInForce') ? $this->safe_string($params, 'timeInForce') : 'GTC',
            'side' => $side,
        );
        if ($type === 'LIMIT' || $type === 'STOP-LIMIT') {
            if (!$price) {
                throw new ArgumentsRequired($this->id . ' createOrder LIMIT or STOP-LIMIT need $price argument');
            }
            $request['price'] = (string) $price;
        }
        $this->check_params($params);
        $isSpot = $this->is_spot($symbol, $params);
        $response = null;
        if ($isSpot) {
            $response = $this->privatePostSpotOrders (array_merge($request, $params));
        } else {
            $response = $this->privatePostFuturesOrders (array_merge($request, $params));
        }
        if ($response && $response['code'] !== 1) {
            throw new BadResponse($response['message']);
        }
        // $response={
        //     "code":1,
        //     "data":array(
        //        "avgPrice":"0",
        //        "base":"BTC",
        //        "clOrdID":"aax_futures",
        //        "code":"FP",
        //        "commission":"0",
        //        "createTime":null,
        //        "cumQty":"0",
        //        "id":"114375893764395008",
        //        "isTriggered":null,
        //        "lastPrice":"0",
        //        "lastQty":null,
        //        "leavesQty":"100",
        //        "leverage":"1",
        //        "liqType":0,
        //        "marketPrice":"8760.7500000000",
        //        "orderID":"wJTewQc81",
        //        "orderQty":"100",
        //        "orderStatus":0,
        //        "orderType":2,
        //        "$price":"8000",
        //        "quote":"USD",
        //        "rejectCode":null,
        //        "rejectReason":null,
        //        "settleType":"INVERSE",
        //        "$side":1,
        //        "stopPrice":null,
        //        "$symbol":"BTCUSDFP",
        //        "transactTime":null,
        //        "updateTime":null,
        //        "timeInForce":1,
        //        "execInst" => "",
        //        "userID":"216214"
        //     ),
        //     "message":"success",
        //     "ts":1573541338074
        //  }
        $order = array_merge($response['data'], array( 'ts' => $response['ts'] ));
        return $this->parse_order($order);
    }

    public function edit_order($id, $symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->cancel_order($id, $symbol, $params);
        return $this->create_order($symbol, $type, $side, $amount, $price, $params);
        // $response={
        //     "code":1,
        //     "data":array(
        //        "avgPrice":"0",
        //        "base":"BTC",
        //        "clOrdID":"aax",
        //        "commission":"0",
        //        "createTime":"2019-11-12T03:46:41Z",
        //        "cumQty":"0",
        //        "$id":"114330021504606208",
        //        "isTriggered":false,
        //        "lastPrice":"0",
        //        "lastQty":"0",
        //        "leavesQty":"0.05",
        //        "orderID":"wJ4L366KB",
        //        "orderQty":"0.05",
        //        "orderStatus":1,
        //        "orderType":2,
        //        "$price":"8000",
        //        "quote":"USDT",
        //        "rejectCode":0,
        //        "rejectReason":null,
        //        "$side":1,
        //        "stopPrice":"0",
        //        "$symbol":"BTCUSDT",
        //        "transactTime":null,
        //        "updateTime":"2019-11-12T03:46:41Z",
        //        "timeInForce":1,
        //        "userID":"216214"
        //     ),
        //     "message":"success",
        //     "ts":1573530401494
        // }
    }

    public function purse_type() {
        return array(
            'spot' => 'SPTP',
            'future' => 'FUTP',
            'otc' => 'F2CP',
            'saving' => 'VLTP',
        );
    }

    public function fetch_balance($params = array ()) {
        $this->load_markets();
        $type = $this->safe_string($params, 'type') ? $this->safe_string($params, 'type') : $this->options['defaultType'];
        $this->check_params($params, ['spot', 'future', 'otc', 'saving']);
        $purseType = $this->purse_type();
        $response = $this->privateGetAccountBalances (array( 'purseType' => $purseType[$type] ));
        // $response = array(
        //     'code' => 1,
        //     'message' => 'success',
        //     'ts' => 1603187218565,
        //     'data' => array(
        //         array(
        //             'purseType' => 'SPTP',
        //             'currency' => 'USDT',
        //             'available' => '9402.93025232',
        //             'unavailable' => '47.92316768',
        //         ),
        //         array(
        //             'purseType' => 'SPTP',
        //             'currency' => 'BTC',
        //             'available' => '0.14995000',
        //             'unavailable' => '0.00000000',
        //         ),
        //         array(
        //             'purseType' => 'RWDP',
        //             'currency' => 'BTC',
        //             'available' => '0.00030000',
        //             'unavailable' => '0.00200000',
        //         ),
        //         array(
        //             'purseType' => 'FUTP',
        //             'currency' => 'BTC',
        //             'available' => '0.02000000',
        //             'unavailable' => '0.20030000',
        //         ),
        //     ),
        // );
        // RWDP
        $balances = $this->safe_value($response, 'data');
        $result = array( 'info' => $balances );
        for ($i = 0; $i < count($balances); $i++) {
            $balance = $balances[$i];
            $currencyId = $this->safe_string($balance, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_float($balance, 'available');
            $account['used'] = $this->safe_float($balance, 'unavailable');
            $account['total'] = $this->safe_float($balance, 'available') . $this->safe_float($balance, 'unavailable');
            $result[$code] = $account;
        }
        return $this->parse_balance($result);
    }

    public function fetch_markets($params = array ()) {
        $response = $this->publicGetInstruments ($params);
        // $response = array( 'code' => 1,
        //     'message' => 'success',
        //     'ts' => 1603264508726,
        //     'data' => [
        //         array(
        //             'tickSize' => '0.01',
        //             'lotSize' => '1',
        //             'base' => 'BTC',
        //             'quote' => 'USDT',
        //             'minQuantity' => '1.0000000000',
        //             'maxQuantity' => '30000',
        //             'minPrice' => '0.0100000000',
        //             'maxPrice' => '999999.0000000000',
        //             'status' => 'enable',
        //             'symbol' => 'BTCUSDT',
        //             'code' => '',
        //             'takerFee' => '0.00040',
        //             'makerFee' => '0.00020',
        //             'multiplier' => '0.001000000000',
        //             'mmRate' => '0.00500',
        //             'imRate' => '0.01000',
        //             'type' => 'futures',
        //             'settleType' => 'Vanilla',
        //             'settleCurrency' => 'USDT',
        //         )] );
        $markets = $this->safe_value($response, 'data');
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $markets[$i];
            $id = $this->safe_string($market, 'symbol');
            $base = strtoupper($this->safe_string($market, 'base'));
            $quote = strtoupper($this->safe_string($market, 'quote'));
            $baseId = strtolower($base);
            $quoteId = strtolower($quote);
            $active = $this->safe_string($market, 'status') === 'enable';
            $taker = $this->safe_float($market, 'takerFee');
            $maker = $this->safe_float($market, 'makerFee');
            $symbol = $base . '/' . $quote;
            if ($this->safe_string($market, 'code')) {
                $symbol = $symbol . $this->safe_string($market, 'code');
            }
            // todo => find out their undocumented $precision and limits
            $precision = array(
                'amount' => null,
                'price' => null,
                'cost' => null,
            );
            $result[] = array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'precision' => $precision,
                'info' => $market,
                'active' => $active,
                'taker' => $taker,
                'maker' => $maker,
                'percentage' => false,
                'tierBased' => true,
                'limits' => array(
                    'amount' => array(
                        'min' => $this->safe_string($market, 'minQuantity'),
                        'max' => $this->safe_string($market, 'maxQuantity'),
                    ),
                    'price' => array(
                        'min' => $this->safe_string($market, 'minPrice'),
                        'max' => $this->safe_string($market, 'maxPrice'),
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
            );
        }
        return $result;
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        $symbol = $this->deal_symbol($symbol, $params);
        $this->load_markets();
        $request = $this->deal_since_limit($since, $limit);
        $this->check_params($params);
        $optionType = $this->safe_string($params, 'type') ? $this->safe_string($params, 'type') : $this->options['defaultType'];
        $response = null;
        if ($optionType === 'spot') {
            $response = $this->privateGetSpotTrades (array_merge($request, $params));
        } else {
            $response = $this->privateGetFuturesTrades (array_merge($request, $params));
        }
        if ($response && $response['code'] !== 1) {
            throw new BadResponse($response['message']);
        }
        // $response={
        //     "code":1,
        //     "data":{
        //        "list":array(
        //           array(
        //              "avgPrice":"8000",
        //              "base":"BTC",
        //              "commission":"0.00000888",
        //              "createTime":"2019-11-12T03:18:35Z",
        //              "cumQty":"0.0148",
        //              "filledPrice":"8000",
        //              "filledQty":"0.0148",
        //              "id":"114322949580906499",
        //              "leavesQty":"0.0052",
        //              "orderID":"wFo9ZPxAJ",
        //              "orderQty":"0.02",
        //              "orderStatus":2,
        //              "orderType":2,
        //              "price":"8000",
        //              "quote":"USDT",
        //              "rejectCode":0,
        //              "rejectReason":null,
        //              "side":1,
        //              "stopPrice":"0",
        //              "$symbol":"BTCUSDT",
        //              "taker":false,
        //              "transactTime":"2019-11-12T03:16:16Z",
        //              "updateTime":null,
        //              "userID":"216214"
        //           }
        //        ),
        //        "pageNum":1,
        //        "pageSize":1,
        //        "total":10
        //     ),
        //     "message":"success",
        //     "ts":1573532934832
        // }
        $trades = $response['data']['list'];
        return $this->parse_my_trades($trades);
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $dateScale = $this->deal_time_frame($timeframe);
        $symbol = $this->deal_symbol($symbol, $params);
        $this->load_markets();
        [$base, $quote] = explode('/', $symbol);
        $limit = $limit ? $limit : 500;
        $request = array(
            'limit' => $limit,
            'base' => $base,
            'quote' => $quote,
            'format' => 'array',
            'useV1' => true,
            'date_scale' => $dateScale,
        );
        if ($since !== null) {
            $request['timestamp'] = intval($since / 1000);
        }
        $response = $this->publicGetGetHistMarketData (array_merge($request, $params));
        if ($response && gettype($response) === 'array' && count(array_filter(array_keys($response), 'is_string')) == 0) {
            for ($i = 0; $i < count($response); $i++) {
                if ($response[$i] && gettype($response[$i]) === 'array' && count(array_filter(array_keys($response[$i]), 'is_string')) == 0) {
                    for ($index = 0; $index < count($response[$i]); $index++) {
                        $arr = $response[$i];
                        if ($index === 0) {
                            $arr[$index] = $this->deal_decimal('mul', $this->safe_float($arr, $index), 1000);
                        } else {
                            $arr[$index] = floatval($arr[$index]);
                        }
                    }
                }
            }
            return $this->parse_ohlcvs($response);
        }
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = $this->deal_since_limit($since, $limit);
        $symbol = $this->deal_symbol($symbol, $params);
        if ($symbol) {
            $request['symbol'] = $this->market_id($symbol);
        }
        $this->check_params($params);
        $isSpot = $this->is_spot($symbol, $params);
        $response = null;
        if ($isSpot) {
            $response = $this->privateGetSpotOpenOrders (array_merge($request, $params));
        } else {
            $response = $this->privateGetFuturesOpenOrders (array_merge($request, $params));
        }
        // $response={
        //     "code":1,
        //     "data":{
        //        "list":array(
        //           array(
        //              "avgPrice":"0",
        //              "base":"BTC",
        //              "clOrdID":"aax",
        //              "commission":"0",
        //              "createTime":"2019-11-12T03:41:52Z",
        //              "cumQty":"0",
        //              "id":"114328808516083712",
        //              "isTriggered":false,
        //              "lastPrice":"0",
        //              "lastQty":"0",
        //              "leavesQty":"0",
        //              "orderID":"wJ3qitASB",
        //              "orderQty":"0.02",
        //              "orderStatus":1,
        //              "orderType":2,
        //              "price":"8000",
        //              "quote":"USDT",
        //              "rejectCode":0,
        //              "rejectReason":null,
        //              "side":1,
        //              "stopPrice":"0",
        //              "$symbol":"BTCUSDT",
        //              "transactTime":null,
        //              "updateTime":"2019-11-12T03:41:52Z",
        //              "timeInForce":1,
        //              "userID":"216214"
        //           }
        //        ),
        //        "pageNum":1,
        //        "pageSize":2,
        //        "total":2
        //     ),
        //     "message":"success",
        //     "ts":1573553718212
        //  }
        $orders = $response['data']['list'];
        $result = array();
        for ($i = 0; $i < count($orders); $i++) {
            $order = array_merge($orders[$i]);
            $result[] = $this->parse_order($order);
        }
        return $result;
    }

    public function fetch_order($id = null, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array();
        if (!$id) {
            throw new ArgumentsRequired($this->id . ' editOrder need orderId argument');
        }
        $request['orderID'] = $id;
        $symbol = $this->deal_symbol($symbol, $params);
        if ($symbol) {
            $request['symbol'] = $this->market_id($symbol);
        }
        $this->check_params($params);
        $isSpot = $this->is_spot($symbol, $params);
        $response = null;
        if ($isSpot) {
            $response = $this->privateGetSpotOrders (array_merge($request, $params));
        } else {
            $response = $this->privateGetFuturesOrders (array_merge($request, $params));
        }
        // $response={
        //     "code":1,
        //     "data":{
        //        "total":19,
        //        "pageSize":10,
        //        "list":array(
        //           array(
        //              "orderType":2,
        //              "$symbol":"BTCUSDT",
        //              "avgPrice":"0",
        //              "orderStatus":0,
        //              "userID":"7225",
        //              "quote":"USDT",
        //              "rejectReason":null,
        //              "rejectCode":null,
        //              "price":"0",
        //              "orderQty":"0.002",
        //              "commission":"0",
        //              "$id":"110419975166304256",
        //              "isTriggered":null,
        //              "side":1,
        //              "orderID":"vBGlDcLwk",
        //              "cumQty":"0",
        //              "leavesQty":"0",
        //              "updateTime":null,
        //              "clOrdID":"0001",
        //              "lastQty":"0",
        //              "stopPrice":"0",
        //              "createTime":"2019-11-01T08:49:33Z",
        //              "transactTime":null,
        //              "timeInForce":1,
        //              "base":"BTC",
        //              "lastPrice":"0"
        //           }
        //        ),
        //        "pageNum":1
        //     ),
        //     "message":"success",
        //     "ts":1572598173682
        //  }
        $orders = $response['data']['list'];
        $result = array();
        for ($i = 0; $i < count($orders); $i++) {
            $order = array_merge($orders[$i]);
            $result[] = $this->parse_order($order);
        }
        return $result;
    }

    public function fetch_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $symbol = $this->deal_symbol($symbol, $params);
        $this->load_markets();
        $request = $this->deal_since_limit($since, $limit);
        $this->check_params($params);
        $isSpot = $this->is_spot($symbol, $params);
        if ($symbol) {
            $request['symbol'] = $this->market_id($symbol);
        }
        $response = null;
        if ($isSpot) {
            $response = $this->privateGetSpotOrders (array_merge($request, $params));
        } else {
            $response = $this->privateGetFuturesOrders (array_merge($request, $params));
        }
        // $response={
        //     "code":1,
        //     "data":{
        //        "total":19,
        //        "pageSize":10,
        //        "list":array(
        //           array(
        //              "orderType":2,
        //              "$symbol":"BTCUSDT",
        //              "avgPrice":"0",
        //              "orderStatus":0,
        //              "userID":"7225",
        //              "quote":"USDT",
        //              "rejectReason":null,
        //              "rejectCode":null,
        //              "price":"0",
        //              "orderQty":"0.002",
        //              "commission":"0",
        //              "id":"110419975166304256",
        //              "isTriggered":null,
        //              "side":1,
        //              "orderID":"vBGlDcLwk",
        //              "cumQty":"0",
        //              "leavesQty":"0",
        //              "updateTime":null,
        //              "clOrdID":"0001",
        //              "lastQty":"0",
        //              "stopPrice":"0",
        //              "createTime":"2019-11-01T08:49:33Z",
        //              "transactTime":null,
        //              "timeInForce":1,
        //              "base":"BTC",
        //              "lastPrice":"0"
        //           }
        //        ),
        //        "pageNum":1
        //     ),
        //     "message":"success",
        //     "ts":1572598173682
        //  }
        $orders = $response['data']['list'];
        $result = array();
        for ($i = 0; $i < count($orders); $i++) {
            $order = array_merge($orders[$i]);
            $result[] = $this->parse_order($order);
        }
        return $result;
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        if ($limit && !$this->in_array($limit, [20, '20', 50, '50'])) {
            throw new BadRequest('limit must be 20 or 50 ');
        }
        $symbol = $this->deal_symbol($symbol, $params);
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $request['level'] = $limit ? $limit : 20; // Support 20, 50
        $orderbook = $this->publicGetMarketOrderbook (array_merge($request, $params));
        $timestamp = $this->safe_timestamp($orderbook, 't') / 1000; // need unix type
        return $this->parse_order_book($orderbook, $timestamp);
    }

    public function fetch_ticker($symbol, $params = array ()) {
        $symbol = $this->deal_symbol($symbol, $params);
        $this->load_markets();
        $market = $this->market($symbol);
        $value = $market['id'];
        $response = $this->publicGetMarketTickers ();
        $ticket = array_merge($this->filter_by($response['tickers'], 's', $value)[0], array( 'at' => $response['t'] ));
        return $this->parse_ticker($ticket, $market);
    }

    public function fetch_tickers($symbols = [], $params = array ()) {
        $this->load_markets();
        $response = $this->publicGetMarketTickers ();
        // $response = array(
        //     'e' => 'tickers',
        //     't' => 1592568022678,
        //     'tickers':
        //     array(
        //         array(
        //             'a' => '0.00000000',
        //             'c' => '52.50000000',
        //             'd' => '-0.94339623',
        //             'h' => '53.00000000',
        //             'l' => '50.80000000',
        //             'o' => '53.00000000',
        //             's' => 'ZECUSDT',
        //             'v' => '42525.11699994',
        //         ),
        //         array(
        //             'a' => '0.00000000',
        //             'c' => '0.00000222',
        //             'd' => '-5.53191489',
        //             'h' => '0.00000236',
        //             'l' => '0.00000216',
        //             'o' => '0.00000235',
        //             's' => 'ZILBTC',
        //             'v' => '5.84912230',
        //         ),
        //     ),
        // );
        $tickers = $response['tickers'];
        $result = array();
        if ($tickers && gettype($tickers) === 'array' && count(array_filter(array_keys($tickers), 'is_string')) == 0) {
            for ($index = 0; $index < count($tickers); $index++) {
                $ticker = $tickers[$index];
                $ticker = array_merge($ticker, array( 'at' => $response['t'] ));
                $result[] = $this->parse_ticker($ticker);
            }
        }
        return $this->filter_by_array($result, 'symbol', $symbols);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        $symbol = $this->deal_symbol($symbol, $params);
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            'limit' => 2, // max 2000
        );
        $response = $this->publicGetMarketTrades ($request);
        return $this->parse_trades($response['trades'], $market, $since, $limit);
    }

    public function parse_ticker($ticker, $market = null) {
        $timestamp = $ticker['at'];
        $obj = $this->safe_value($this->marketsById, $this->safe_string($ticker, 's'));
        $symbol = $obj ? $this->safe_string($obj, 'symbol') : null;
        if ($market) {
            $symbol = $market['symbol'];
        }
        if ($symbol && mb_substr($symbol, -2) === 'FP') {
            $symbol = mb_substr($symbol, 0, -2 - 0);
        }
        $last = $this->safe_float($ticker, 'c');
        $open = $this->safe_float($ticker, 'o');
        $change = $this->deal_decimal('sub', $last, $open);
        $percentage = ($open && $change) ? $this->deal_decimal('mul', $this->deal_decimal('div', $change, $open), 100) : null;
        $average = $this->deal_decimal('div', $this->deal_decimal('add', $last, $open), 2);
        return array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_float($ticker, 'h'),
            'low' => $this->safe_float($ticker, 'l'),
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $change,
            'percentage' => $percentage,
            'average' => $average,
            'baseVolume' => null,
            'quoteVolume' => null,
            'info' => $ticker,
        );
    }

    public function parse_trade($trade, $market = null) {
        $timestamp = $this->safe_float($trade, 't');
        $id = $this->safe_string($trade, 'tid');
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        if ($symbol && mb_substr($symbol, -2) === 'FP') {
            $symbol = mb_substr($symbol, 0, -2 - 0);
        }
        $price = $this->safe_float($trade, 'p');
        $amount = $this->safe_float($trade, 'q');
        $side = $price > 0 ? 'buy' : 'sell';
        $cost = $this->deal_decimal('mul', $price, $amount);
        $currency = $symbol ? explode('/', $symbol)[1] : 'currency';
        return array(
            'info' => $trade,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'type' => null,
            'side' => $side,
            'order' => null,
            'takerOrMaker' => null,
            'price' => abs($price),
            'amount' => $amount,
            'cost' => abs($cost),
            'fee' => array(
                'cost' => null,
                'currency' => $currency,
                'rate' => null,
            ),
        );
    }

    public function parse_my_trade($trade) {
        $id = $this->safe_string($trade, 'id');
        $orderId = $this->safe_string($trade, 'orderID');
        $createTime = $this->safe_string($trade, 'createTime');
        $timestamp = $createTime ? $createTime : null;
        $symbol = $this->safe_string($trade, 'symbol');
        $symbol = $symbol ? $this->marketsById[$symbol]['symbol'] : $symbol;
        if ($symbol && mb_substr($symbol, -2) === 'FP') {
            $symbol = mb_substr($symbol, 0, -2 - 0);
        }
        $price = $this->safe_float($trade, 'price');
        $type = $this->parse_order_type($this->safe_string($trade, 'orderType'));
        $side = $this->safe_string($trade, 'side') === 1 ? 'Buy' : 'Sell';
        $amount = $this->safe_float($trade, 'filledQty');
        return array(
            'info' => $trade,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'order' => $orderId,
            'takerOrMaker' => 'taker',
            'price' => $price,
            'amount' => $amount,
            'cost' => $this->deal_decimal('mul', $price, $amount),
            'fee' => array(
                'currency' => null,
                'cost' => null,
                'rate' => null,
            ),
        );
    }

    public function parse_my_trades($trades) {
        $result = array();
        for ($i = 0; $i < count($trades); $i++) {
            $trade = $trades[$i];
            $trade = $this->parse_my_trade($trade);
            $result[] = $trade;
        }
        return $result;
    }

    public function parse_trades($trades, $market = null, $since = null, $limit = null, $params = array ()) {
        $lists = array();
        for ($i = 0; $i < count($trades); $i++) {
            $trade = $trades[$i];
            $lists[] = $this->parse_trade($trade, $market);
        }
        $trades = $lists;
        $result = $this->sort_by($trades, 'timestamp');
        $symbol = null;
        if ($market && $this->safe_string($market, 'symbol')) {
            $symbol = $this->safe_string($market, 'symbol');
            if (mb_substr($symbol, -2) === 'FP') {
                $symbol = mb_substr($symbol, 0, -2 - 0);
            }
        }
        return $this->filter_by_symbol_since_limit($result, $symbol, $since, $limit);
    }

    public function parse_order_status($status) {
        $statuses = array(
            '0' => 'open', // open
            '1' => 'open', // open
            '2' => 'closed', // closed
            '3' => 'closed', // closed
            '4' => 'cancled', // cancled
            '5' => 'cancled', // cancled
            '6' => 'rejected', // Rejected
            '10' => 'cancled', // cancled
            '11' => 'rejected', // Rejected
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order_type($status) {
        $statuses = array(
            '1' => 'market',
            '2' => 'limit',
            '3' => 'Stop Order',
            '4' => 'Stop-Limit Order',
            '7' => 'Stop Loss',
            '8' => 'Take Profit',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order) {
        $createTime = $this->safe_string($order, 'createTime');
        $timestamp = $createTime ? $createTime : $this->safe_float($order, 'ts');
        $status = $this->parse_order_status($this->safe_string($order, 'orderStatus'));
        $type = $this->parse_order_type($this->safe_string($order, 'orderType'));
        $side = $this->safe_string($order, 'side') === 1 ? 'buy' : 'sell';
        $id = $this->safe_string($order, 'orderID');
        $clientOrderId = $this->safe_string($order, 'clOrdID');
        $symbol = $this->safe_string($order, 'symbol');
        $symbol = $symbol ? $this->marketsById[$symbol]['symbol'] : $symbol;
        if ($symbol && mb_substr($symbol, -2) === 'FP') {
            $symbol = mb_substr($symbol, 0, -2 - 0);
        }
        $price = $this->safe_float($order, 'price');
        $average = $this->safe_float($order, 'avgPrice');
        $amount = $this->safe_float($order, 'orderQty');
        $filled = $this->safe_float($order, 'cumQty');
        $remaining = $this->safe_string($order, 'leavesQty');
        $transactTime = $this->safe_string($order, 'transactTime');
        $lastTradeTimestamp = $transactTime ? $transactTime : null;
        $currency = null;
        return array(
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $timestamp,
            'datetime' => $this->parse_date($timestamp),
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'status' => $status,
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'price' => $price,
            'average' => $average,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => $remaining,
            'rejectReason' => $this->safe_string($order, 'rejectReason'),
            'cost' => $this->deal_decimal('mul', $filled, $price),
            'trades' => array(),
            'info' => $order,
            'fee' => array(
                'currency' => $currency,
                'cost' => null,
                'rate' => null,
            ),
        );
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $version = $this->version;
        if ($this->safe_string($params, 'useV1')) {
            $version = $this->v1;
        }
        $request = '/' . $version . '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->urls['api'] . $request;
        if ($api === 'public') {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } else {
            $this->check_required_credentials();
            $nonce = (string) $this->nonce();
            $privateHeader = array(
                'X-ACCESS-KEY' => $this->apiKey,
                'X-ACCESS-NONCE' => $nonce,
            );
            $suffix = $this->urlencode($query);
            if ($method === 'GET') {
                $url = $suffix ? ($url . '?' . $suffix) : $url;
                $request = $suffix ? ($request . '?' . $suffix) : $request;
                $payload = array(
                    'nonce' => $nonce,
                    'verb' => $method,
                    'path' => $request,
                    'data' => '',
                );
                $sign = $this->get_sign_from_secret($payload);
                $privateHeader['X-ACCESS-SIGN'] = $sign;
                $headers = array_merge(array( 'accept' => 'application/json;charset=UTF-8' ), $privateHeader);
            } else {
                $payload = array(
                    'nonce' => $nonce,
                    'verb' => $method,
                    'path' => $request,
                    'data' => $this->json($query, array( 'convertArraysToObjects' => true )),
                );
                $sign = $this->get_sign_from_secret($payload);
                $privateHeader['X-ACCESS-SIGN'] = $sign;
                $body = $this->json($query, array( 'convertArraysToObjects' => true ));
                $headers = array_merge(array( 'Content-Type' => 'application/json' ), $privateHeader);
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return;
        }
        if ($code === 400) {
            $error = $this->safe_value($response, 'error');
            $errorCode = $this->safe_string($error, 'code');
            $feedback = $this->id . ' ' . $this->json($response);
            $this->throw_exactly_matched_exception($this->exceptions, $errorCode, $feedback);
            // fallback to default $error handler
        }
    }

    public function get_sign_from_secret($params) {
        $nonce = $this->safe_string($params, 'nonce');
        $verb = $this->safe_string($params, 'verb');
        $path = $this->safe_string($params, 'path');
        $data = $this->safe_string($params, 'data');
        $message = $nonce . ':' . $verb . $path . $data;
        return $this->hmac($this->encode($message), $this->encode($this->secret));
    }

    public function check_params($params, $arr = []) {
        if (!$this->in_array($this->options['defaultType'], ['spot', 'future'])) {
            throw new BadRequest('defaultType must be spot or future');
        }
        if ($this->is_empty($arr)) {
            $arr = ['spot', 'future'];
        }
        $type = $this->options['defaultType'];
        if ($params && $this->safe_string($params, 'type')) {
            $type = $this->safe_string($params, 'type');
            if (!$this->in_array($type, $arr)) {
                throw new BadRequest('params.type must be' . implode(',', $arr));
            }
        }
    }

    public function deal_since_limit($since, $limit) {
        $result = array();
        if ($since) {
            $result['startDate'] = $this->ymd($since);
        }
        if ($limit) {
            $result['pageSize'] = $limit;
        }
        return $result;
    }

    public function deal_time_frame($timeframe) {
        $dateScale = $this->timeframes[$timeframe];
        if (!$dateScale) {
            $keys = is_array($this->timeframes) ? array_keys($this->timeframes) : array();
            $error = implode(',', $keys);
            throw new BadRequest('timeframes must be ' . $error);
        }
        return $dateScale;
    }

    public function deal_symbol($symbol, $params) {
        $this->check_params($params);
        $type = $this->options['defaultType'];
        if ($this->safe_string($params, 'type')) {
            $type = $this->safe_string($params, 'type');
        }
        $isSpot = $type === 'spot';
        if ($symbol) {
            if (!$isSpot && mb_substr($symbol, -2) !== 'FP') {
                $symbol = $symbol . 'FP';
            }
        }
        return $symbol;
    }

    public function deal_decimal($op, $num1, $num2, $digits = 8) {
        $result = 0;
        $num1 = floatval($num1);
        $num2 = floatval($num2);
        if ($op === 'add') {
            $result = $this->decimal_to_precision($this->sum($num1, $num2), ROUND, $digits, $this->precisionMode);
        }
        if ($op === 'sub') {
            $result = $this->decimal_to_precision($num1 - $num2, ROUND, $digits, $this->precisionMode);
        }
        if ($op === 'mul') {
            $result = $this->decimal_to_precision($num1 * $num2, ROUND, $digits, $this->precisionMode);
        }
        if ($op === 'div') {
            $result = $this->decimal_to_precision($num1 / $num2, ROUND, $digits, $this->precisionMode);
        }
        return floatval($result);
    }

    public function is_spot($symbol, $params) {
        $optionType = $this->options['defaultType'];
        if ($this->safe_string($params, 'type')) {
            $optionType = $this->safe_string($params, 'type');
        }
        if ($symbol) {
            return $optionType === 'spot' && mb_substr($symbol, -2) !== 'FP';
        }
        return $optionType === 'spot';
    }
}
